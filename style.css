/*!
/**
 * Quintessential Responsive 3D CSS Cube
 * https://github.com/zachstronaut/quintessential-css-cube/
 * 2015-03-04 Release
 * MIT License
 *
 * Zachary Johnson, @zacharyjohnson
 * Zachstronaut LLC, http://www.zachstronaut.com
 *
 */

/*


Features:
=========
	-Specify the size of your cube in a single CSS rule
	-Specify the color/texture of your cube with a single CSS rule
	-Automatic flat shading (make the cube whatever color or texture or DOM content you want, it'll be given basic shading for you via :after pseudo element)
	-Flexible tags for cube faces (your cube can be div tags or a ul list or whatever)
	-Excellent responsive design support


Example Usage:
A red 200 x 200 x 200px cube
============================

<style>

#cube1 { width: 200px; height: 200px; }

	#cube1 > * { background: #f00; }

</style>

<ul id="cube1" class="qube">
	<li class="f"></li>
	<li class="l"></li>
	<li class="back"></li>
	<li class="r"></li>
	<li class="t"></li>
	<li class="d"></li>
</ul>

*/

* {padding: 0;
	margin: 0;
}

/* keyframes for rotating animation */

/* scene wrapper */
.wrapper{
  height: 300px;
  margin-top:50px;
  position:relative;
  perspective: 800;
  perspective-origin: 50% 100px;
}

/* cube wrapper */
.cube{
	grid-area: qube;
  position: relative;
  margin: 0 auto;
  width: 200px;
  transform-style: preserve-3d;
  transition: all 1s linear;
}

/* outer cube */
b{
  position:absolute;
  width:200px;
  height:200px;
  display:block;
  background:rgba(255,255,255,0.1);
  box-shadow:inset 0 0 30px rgba(0,0,0,0.2);
  font-size:20px;
  text-align:center;
  line-height:200px;
  color:rgba(0,0,0,0.5);
  font-family:sans-serif;
  text-transform:uppercase;
  transition: all 1s linear;
}
#b {
  transform: translateZ(-100px) rotateY(180deg);
}

#r {
  transform:rotateY(-270deg) translateX(100px);
  transform-origin: top right;
}
#l {
  transform:rotateY(270deg) translateX(-100px);
  transform-origin: center left;
}
#t {
  transform:rotateX(-90deg) translateY(-100px);
  transform-origin: top center;
}
#d {
  transform:rotateX(90deg) translateY(100px);
  transform-origin: bottom center;
}
#f {
  transform: translateZ(100px);
}

/* inner cube */
/* hover transformations */


.qube {
  grid-area: qube;
	position: absolute;
  padding: 0;
	list-style: none;
	width: 25vw;
	height: 25vw;
	-webkit-transform-style: preserve-3d;
	-moz-transform-style: preserve-3d;
	transform-style: preserve-3d;
}

#kyub div {
	position: absolute;
	width: 25vw;
	height: 25vw;
}

.cube13 {
  width: 25vw; height: 25vw;
  transition: transform 1500ms ease;
}

.dir {
  cursor: pointer;
}

#b {
	transform: translateZ(-25vw) rotateY(180deg);
	background-color: darkgrey;}
#r {
	transform: rotateY(-270deg) translateX(25vw);
	transform-origin: top right;
	background-color: grey;
}
#l {
	transform: rotateY(270deg) translateX(-25vw);
	transform-origin: center left;
	background-color: grey;
}
#t {
	transform: rotateX(-90deg) translateY(-50vw);
	transform-origin: top center;
background-color: grey;}
#d {
	transform: rotateX(90deg) translateY(25vw);
	transform-origin: bottom center;
	background-color: grey;
}
#f {
	transform: translateZ(25vw);
	background-color: lightgrey;
}

#kyub {perspective: 800px;
	perspective-origin: 50% 25vw;
	position: relative;
	width: 25vw;
	transform-style: preserve-3d;
}

#container {
  display: grid;
  grid-template-areas: ". t ."
  "l qube r"
  ". d .";
  grid-template-columns: 15vw 70vw 15vw;
  grid-template-rows: 15vh 70vh 15vw;
  justify-items: stretch;
  align-items: stretch;
}

#bottom {
  grid-area: d;
}
#top {
  grid-area: t;
  cursor: pointer;
}
#right {
  grid-area: r;
}
#left {
  grid-area: l;
}
